import { BrowserWindow, dialog } from 'electron';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow | null = null;

export const createMainWindow = (): BrowserWindow => {
  mainWindow = new BrowserWindow({
    width: 1250,
    height: 800,
    minWidth: 1250,
    minHeight: 768,
    webPreferences: {
      contextIsolation: true,
      nodeIntegration: false,
      sandbox: false, // Disable sandbox to allow preload script to work with webpack
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    show: false, // Show after ready-to-show
  });

  // Set Content Security Policy to allow external images
  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ["default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https:; img-src 'self' data: https:;"]
      }
    });
  });

  // Load renderer
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Show when ready
  mainWindow.once('ready-to-show', () => {
    mainWindow?.show();
  });

  // Handle close with unsaved changes check
  mainWindow.on('close', async (event) => {
    if (!mainWindow) return;
    
    try {
      // Check if there are unsaved changes
      const hasUnsaved = await mainWindow.webContents.executeJavaScript(`
        window.appService?.hasUnsavedChanges?.() || false
      `);

      if (hasUnsaved) {
        // Prevent the default close behavior
        event.preventDefault();
        
        // Show confirmation dialog
        const result = await dialog.showMessageBox(mainWindow, {
          type: 'warning',
          title: 'Unsaved Changes',
          message: 'Unsaved Changes',
          detail: 'There are unsaved changes in open files. Do you wish to save these?',
          buttons: ['No', 'Yes'],
          defaultId: 1, // Default to "Yes" (cancel close)
          cancelId: 0   // "No" cancels the dialog
        });

        if (result.response === 0) {
          // User chose "No" - allow the window to close
          mainWindow = null;
          // Don't prevent default - let the window close
        }
        // If user chose "Yes", do nothing - window stays open
      }
    } catch (error) {
      console.error('Error checking for unsaved changes:', error);
      // If there's an error, allow the window to close
      mainWindow = null;
    }
  });

  // Handle closed
  mainWindow.on('closed', () => {
    mainWindow = null;
  });

  return mainWindow;
};

export const getMainWindow = (): BrowserWindow | null => mainWindow;

