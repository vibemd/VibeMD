import { app, BrowserWindow, Menu, nativeImage } from 'electron';
import { createMainWindow } from './window';
import './handlers'; // Import IPC handlers
import * as path from 'path';
import * as fs from 'fs';

// Set app name for macOS navbar and dock
app.setName('VibeMD');

// Set dock icon for macOS
if (process.platform === 'darwin') {
  const iconPath = path.join(app.getAppPath(), 'build', 'icons', 'icon.png');
  console.log('Attempting to set dock icon from:', iconPath);
  console.log('Icon file exists:', fs.existsSync(iconPath));

  if (fs.existsSync(iconPath)) {
    const icon = nativeImage.createFromPath(iconPath);
    app.dock?.setIcon(icon);
    console.log('Dock icon set successfully');
  } else {
    console.error('Icon file not found at:', iconPath);
  }
}

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

app.on('ready', () => {
  mainWindow = createMainWindow();
  
  // Set application menu for macOS
  if (process.platform === 'darwin') {
    const template = [
      {
        label: 'VibeMD',
        submenu: [
          { label: 'About VibeMD', role: 'about' },
          { type: 'separator' },
          { label: 'Services', role: 'services' },
          { type: 'separator' },
          { label: 'Hide VibeMD', accelerator: 'Command+H', role: 'hide' },
          { label: 'Hide Others', accelerator: 'Command+Shift+H', role: 'hideothers' },
          { label: 'Show All', role: 'unhide' },
          { type: 'separator' },
          { label: 'Quit', accelerator: 'Command+Q', click: () => app.quit() }
        ]
      },
      {
        label: 'File',
        submenu: [
          { label: 'New', accelerator: 'Command+N', click: () => mainWindow?.webContents.send('menu-new-file') },
          { label: 'Open', accelerator: 'Command+O', click: () => mainWindow?.webContents.send('menu-open-file') },
          { label: 'Save', accelerator: 'Command+S', click: () => mainWindow?.webContents.send('menu-save-file') },
          { label: 'Save As', accelerator: 'Command+Shift+S', click: () => mainWindow?.webContents.send('menu-save-as-file') },
          { type: 'separator' },
          { label: 'Close', accelerator: 'Command+W', role: 'close' }
        ]
      },
      {
        label: 'Edit',
        submenu: [
          { label: 'Undo', accelerator: 'Command+Z', role: 'undo' },
          { label: 'Redo', accelerator: 'Command+Shift+Z', role: 'redo' },
          { type: 'separator' },
          { label: 'Cut', accelerator: 'Command+X', role: 'cut' },
          { label: 'Copy', accelerator: 'Command+C', role: 'copy' },
          { label: 'Paste', accelerator: 'Command+V', role: 'paste' },
          { label: 'Select All', accelerator: 'Command+A', role: 'selectall' }
        ]
      },
      {
        label: 'View',
        submenu: [
          { label: 'Reload', accelerator: 'Command+R', role: 'reload' },
          { label: 'Force Reload', accelerator: 'Command+Shift+R', role: 'forceReload' },
          { label: 'Toggle Developer Tools', accelerator: 'F12', role: 'toggleDevTools' },
          { type: 'separator' },
          { label: 'Actual Size', accelerator: 'Command+0', role: 'resetZoom' },
          { label: 'Zoom In', accelerator: 'Command+Plus', role: 'zoomIn' },
          { label: 'Zoom Out', accelerator: 'Command+-', role: 'zoomOut' },
          { type: 'separator' },
          { label: 'Toggle Fullscreen', accelerator: 'Control+Command+F', role: 'togglefullscreen' }
        ]
      },
      {
        label: 'Window',
        submenu: [
          { label: 'Minimize', accelerator: 'Command+M', role: 'minimize' },
          { label: 'Close', accelerator: 'Command+W', role: 'close' }
        ]
      }
    ];
    
    const menu = Menu.buildFromTemplate(template as any);
    Menu.setApplicationMenu(menu);
  }
});

app.on('window-all-closed', () => {
  app.quit();
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    mainWindow = createMainWindow();
  }
});
