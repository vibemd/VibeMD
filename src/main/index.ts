import { app, BrowserWindow } from 'electron';
import { createMainWindow } from './window';
import './handlers'; // Import IPC handlers

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

app.on('ready', () => {
  mainWindow = createMainWindow();
});

// Handle app close with unsaved changes check
app.on('before-quit', async (event) => {
  if (!mainWindow) return;

  try {
    // Check if there are unsaved changes
    const hasUnsaved = await mainWindow.webContents.executeJavaScript(`
      window.appService?.hasUnsavedChanges?.() || false
    `);

    if (hasUnsaved) {
      // Prevent the default quit behavior
      event.preventDefault();
      
      // Show confirmation dialog
      const { dialog } = require('electron');
      const result = await dialog.showMessageBox(mainWindow, {
        type: 'warning',
        title: 'Unsaved Changes',
        message: 'Unsaved Changes',
        detail: 'There are unsaved changes in open files. Do you wish to save these?',
        buttons: ['No', 'Yes'],
        defaultId: 1, // Default to "Yes" (cancel close)
        cancelId: 0   // "No" cancels the dialog
      });

      if (result.response === 0) {
        // User chose "No" - allow the app to close
        app.quit();
      }
      // If user chose "Yes", do nothing - app stays open
    }
  } catch (error) {
    console.error('Error checking for unsaved changes:', error);
    // If there's an error, allow the app to close
    app.quit();
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    mainWindow = createMainWindow();
  }
});
