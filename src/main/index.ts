import { app, BrowserWindow, Menu } from 'electron';
import { createMainWindow } from './window';
import './handlers'; // Import IPC handlers

// Set app name for macOS navbar
app.setName('VibeMD');

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow | null = null;

app.on('ready', () => {
  mainWindow = createMainWindow();
  
  // Set application menu for macOS
  if (process.platform === 'darwin') {
    const template = [
      {
        label: 'VibeMD',
        submenu: [
          { label: 'About VibeMD', role: 'about' },
          { type: 'separator' },
          { label: 'Services', role: 'services' },
          { type: 'separator' },
          { label: 'Hide VibeMD', accelerator: 'Command+H', role: 'hide' },
          { label: 'Hide Others', accelerator: 'Command+Shift+H', role: 'hideothers' },
          { label: 'Show All', role: 'unhide' },
          { type: 'separator' },
          { label: 'Quit', accelerator: 'Command+Q', click: () => app.quit() }
        ]
      },
      {
        label: 'File',
        submenu: [
          { label: 'New', accelerator: 'Command+N', click: () => mainWindow?.webContents.send('menu-new-file') },
          { label: 'Open', accelerator: 'Command+O', click: () => mainWindow?.webContents.send('menu-open-file') },
          { label: 'Save', accelerator: 'Command+S', click: () => mainWindow?.webContents.send('menu-save-file') },
          { label: 'Save As', accelerator: 'Command+Shift+S', click: () => mainWindow?.webContents.send('menu-save-as-file') },
          { type: 'separator' },
          { label: 'Close', accelerator: 'Command+W', role: 'close' }
        ]
      },
      {
        label: 'Edit',
        submenu: [
          { label: 'Undo', accelerator: 'Command+Z', role: 'undo' },
          { label: 'Redo', accelerator: 'Command+Shift+Z', role: 'redo' },
          { type: 'separator' },
          { label: 'Cut', accelerator: 'Command+X', role: 'cut' },
          { label: 'Copy', accelerator: 'Command+C', role: 'copy' },
          { label: 'Paste', accelerator: 'Command+V', role: 'paste' },
          { label: 'Select All', accelerator: 'Command+A', role: 'selectall' }
        ]
      },
      {
        label: 'View',
        submenu: [
          { label: 'Reload', accelerator: 'Command+R', role: 'reload' },
          { label: 'Force Reload', accelerator: 'Command+Shift+R', role: 'forceReload' },
          { label: 'Toggle Developer Tools', accelerator: 'F12', role: 'toggleDevTools' },
          { type: 'separator' },
          { label: 'Actual Size', accelerator: 'Command+0', role: 'resetZoom' },
          { label: 'Zoom In', accelerator: 'Command+Plus', role: 'zoomIn' },
          { label: 'Zoom Out', accelerator: 'Command+-', role: 'zoomOut' },
          { type: 'separator' },
          { label: 'Toggle Fullscreen', accelerator: 'Control+Command+F', role: 'togglefullscreen' }
        ]
      },
      {
        label: 'Window',
        submenu: [
          { label: 'Minimize', accelerator: 'Command+M', role: 'minimize' },
          { label: 'Close', accelerator: 'Command+W', role: 'close' }
        ]
      }
    ];
    
    const menu = Menu.buildFromTemplate(template as any);
    Menu.setApplicationMenu(menu);
  }
});

// Handle app quit with unsaved changes check
app.on('will-quit', async (event) => {
  if (!mainWindow) return;

  try {
    // Check if there are unsaved changes
    const hasUnsaved = await mainWindow.webContents.executeJavaScript(`
      window.appService?.hasUnsavedChanges?.() || false
    `);

    if (hasUnsaved) {
      // Prevent the default quit behavior
      event.preventDefault();
      
      // Show confirmation dialog
      const { dialog } = require('electron');
      const result = await dialog.showMessageBox(mainWindow, {
        type: 'warning',
        title: 'Unsaved Changes',
        message: 'Unsaved Changes',
        detail: 'There are unsaved changes in open files. Do you wish to save these?',
        buttons: ['No', 'Yes'],
        defaultId: 1, // Default to "Yes" (cancel close)
        cancelId: 0   // "No" cancels the dialog
      });

      if (result.response === 0) {
        // User chose "No" - allow the app to close
        // Remove the event listener to prevent infinite loop
        app.removeAllListeners('will-quit');
        app.quit();
      }
      // If user chose "Yes", do nothing - app stays open
    }
  } catch (error) {
    console.error('Error checking for unsaved changes:', error);
    // If there's an error, allow the app to close
    app.removeAllListeners('will-quit');
    app.quit();
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    mainWindow = createMainWindow();
  }
});
