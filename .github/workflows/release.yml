name: Release (Assemble Only)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.10). If omitted, uses package.json.'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  resolve-version:
    name: Resolve version/tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set.outputs.version }}
      tag: ${{ steps.set.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve version
        id: set
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const inputVersion = core.getInput('version');
            const version = (inputVersion && inputVersion.trim()) ? inputVersion.replace(/^v/, '') : pkg.version;
            if (!/^\d+\.\d+\.\d+(?:-.+)?$/.test(version)) {
              core.setFailed(`Invalid semantic version: ${version}`);
              return;
            }
            core.setOutput('version', version);
            core.setOutput('tag', `v${version}`);

  create-release:
    name: Create or update GitHub Release (no assets)
    runs-on: ubuntu-latest
    needs: resolve-version
    steps:
      - name: Create or update release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG='${{ needs.resolve-version.outputs.tag }}'
          TITLE='VibeMD ${{ needs.resolve-version.outputs.version }}'
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists. Updating title/notes (no assets)."
            gh release edit "$TAG" --title "$TITLE" --latest
          else
            echo "Creating release $TAG (no assets)"
            PRERELEASE='' ; if [ "${{ inputs.prerelease }}" = "true" ]; then PRERELEASE='--prerelease'; fi
            gh release create "$TAG" --title "$TITLE" --generate-notes $PRERELEASE
          fi

